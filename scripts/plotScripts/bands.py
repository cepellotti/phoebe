#!/usr/bin/env python3
import json
import matplotlib.pyplot as plt
import numpy as np
import argparse
import os

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Plot the band structure that"
                                     " has been generated by Phoebe")
    parser.add_argument("INPUT",
                        help="Name of the JSON file with band structure")
    args = parser.parse_args()

    # load in the json output
    jfileName = args.INPUT
    with open(jfileName) as jfile:
        data = json.load(jfile)

    # unpack the json file
    try:
        pathLabels = data['highSymLabels']
    except KeyError:
        raise KeyError("highSymLabels not found. "
                       "Are you using the correct input json file?")

    points = np.array(data['wavevectorIndices'])
    numBands = data['numBands']
    energies = np.array(data['energies'])

    pathTicks = data['highSymIndices']

    # if the path has a fictitious discontinuity
    # e.g. in going from X=(0.50000  0.00000 0.5000) to X=(0.50000 -0.50000 0.0000)
    # (which are the same in a FCC lattice), the JSON plots two different points
    # Here we recombine them into one. Equality is checked by the label
    enIndexToDelete = []
    tkIndexToDelete = []
    for i in range(len(pathLabels)-1):
        if ( pathLabels[i] == pathLabels[i+1] and pathTicks[i] != pathTicks[i+1]):
            tkIndexToDelete.append(i+1)
            enIndexToDelete.append(pathTicks[i+1])
    for en,tk in zip(enIndexToDelete[::-1],tkIndexToDelete[::-1]):
        points = np.delete(points, -1)
        pathLabels = np.delete(pathLabels, tk)
        pathTicks = np.delete(pathTicks, tk)
        pathTicks[tk:] -= 1
        energies = np.delete(energies, en, 0)

    # plot some vertical lines at high sym points
    plt.figure(figsize=(5.5,5))
    for i in pathTicks:
        plt.axvline(i, color='grey')

    energyLabel = r'Energy [' + data['energyUnit'] +']'

    # plot the bands
    for i in range(numBands):
        plt.plot(points, energies[:,i], lw=2, color='royalblue')

    # plot aesthetics
    plt.xticks(pathTicks,pathLabels,fontsize=12)
    plt.yticks(fontsize=12)
    plt.ylabel(energyLabel,fontsize=14)
    plt.ylim(None, None)
    plt.xlim(points[0],points[-1])

    plt.tight_layout()

    plotFileName = os.path.splitext(jfileName)[0] + ".pdf"

    plt.savefig(plotFileName)
    plt.show(block=False)
